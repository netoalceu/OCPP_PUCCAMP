

import asyncio
from src.tools import now

count = 0


class fsm:
    end_state = 0
    init_state = 1
    authentication = 2
    start_transaction = 3
    measuring = 4
    stop_transaction = 5


async def end_state(info_do_carregador, protocol):  # end State
    print(now(), 'Iniciando o  end_state')
    await asyncio.sleep(1)
    return fsm.init_state


async def init_state(info_do_carregador, protocol):  # Init State
    print(now(), 'Iniciando o  InitState')
    await asyncio.sleep(1)
    # Gerenciamento de Transições
    print(now(), 'Boot Notification is', info_do_carregador.flag_boot_notification)
    if not info_do_carregador.flag_boot_notification:
        return fsm.init_state
    return fsm.authentication


async def authentication(info_do_carregador, protocol):
    print(now(), 'Iniciando o  Authentication')
    if await protocol.send_authorize('1234'):
        return fsm.start_transaction
    else:
        return fsm.authentication
    # return fsm.start_transaction


async def start_transaction(info_do_carregador, protocol):
    print(now(), 'Iniciando o  start_transaction')
    # Gerenciamento de Transições
    global count
    count = 0
    return fsm.measuring


async def measuring(info_do_carregador, protocol):
    global count
    print(now(), 'Measuring...', count)
    # Gerenciamento de Transições
    if count >= 2:
        return fsm.stop_transaction
    else:
        count += 1
        return fsm.measuring


async def stop_transaction(info_do_carregador, protocol):
    print(now(), 'Iniciando o  StopTransaction')
    # Gerenciamento de Transições
    return fsm.authentication


# Finite State Machine (FSM)
async def FSM(estado_do_carregador, info_do_carregador, protocol):
    if estado_do_carregador == fsm.end_state:
        estado_do_carregador = await end_state(info_do_carregador, protocol)
    elif estado_do_carregador == fsm.init_state:
        estado_do_carregador = await init_state(info_do_carregador, protocol)
    elif estado_do_carregador == fsm.authentication:
        estado_do_carregador = await authentication(info_do_carregador, protocol)
    elif estado_do_carregador == fsm.start_transaction:
        estado_do_carregador = await start_transaction(info_do_carregador, protocol)
    elif estado_do_carregador == fsm.measuring:
        estado_do_carregador = await measuring(info_do_carregador, protocol)
    elif estado_do_carregador == fsm.stop_transaction:
        estado_do_carregador = await stop_transaction(info_do_carregador, protocol)
    else:
        estado_do_carregador = fsm.end_state
    return estado_do_carregador


async def state_machine_process(info_do_carregador, protocol):
    # Programa Principal
    estado_do_carregador = fsm.init_state
    while estado_do_carregador:
        estado_do_carregador = await FSM(estado_do_carregador, info_do_carregador, protocol)
        await asyncio.sleep(1)
